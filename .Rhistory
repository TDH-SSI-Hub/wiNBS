library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
suppressMessages(system("taskkill /im java.exe /f"
, intern=FALSE, ignore.stdout=FALSE)
)
suppressMessages(system("taskkill /im java.exe /f"
, intern=FALSE, ignore.stdout=FALSE)
)
system("taskkill /im java.exe /f"
, intern=FALSE, ignore.stderr=T)
library(NBSTools)
?toJSON
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
grepl('[\\|/]$', "greg\\g")
grepl('[\\|/]$', "greg\\g/")
grepl('[\\|/]$', "greg\\g\\")
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
styler:::style_active_file()
library(NBSTools)
grepl('ViewFile',remDr$getCurrentUrl()) & remDr$findElement("xpath", "/html/body")$getElementAttribute("class")[[1]] != "tabIndexClass"
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
class(mtcars)
classes(mtcars)
sapply(mtcars,class)
map_to_state_df<-dataframe(one=1, two-'r')
map_to_state_df<-data.frame(one=1, two-'r')
map_to_state_df<-data.frame(one=1, two='r')
sapply(map_to_state_df,class)
sapply(map_to_state_df,class)==c('numeric','character')
all(sapply(map_to_state_df,class)==c('numeric','character'))
all(ncol(map_to_state_df==2),sapply(map_to_state_df,class)==c('numeric','character'))
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(NBSTools)
library(wiNBS)
browser_open()
nbs_load('dc49p74','NBS Staging')
nbs_queue_load('Documents Requiring Review')
nbs_queue_row_click()
nbs_queue_row_click
row<-1
col=1
if(row%%2==0){
row_class<-'even'
row<-row/2
}else{
row_class<-'odd'
row<-row/2+1
}
cur_element<-remDr$getPageSource() %>% unlist() %>% read_html() %>%
html_elements(paste0('.',row_class)) %>%
.[row] %>%
html_children() %>%
.[col] %>% html_children()
library(dplyr)
library(rvest)
cur_element<-remDr$getPageSource() %>% unlist() %>% read_html() %>%
html_elements(paste0('.',row_class)) %>%
.[row] %>%
html_children() %>%
.[col] %>% html_children()
cur_element
cur_el_attr
cur_element<-remDr$getPageSource() %>% unlist() %>% read_html() %>%
html_elements(paste0('.',row_class)) %>%
.[row] %>%
html_children() %>%
.[col] %>% html_children()
cur_el_attr<-unlist(html_attrs(cur_element))
cur_el_attr
cur_element
xml_path(cur_element)
library(xml2)
xml_path(cur_element)[1]
xml_path(cur_element)
nbs_queue_row_click()
gsub('table\\[4\\]','table[3]',xml_path(cur_element)[1])
str_extract(epath,'table[3]')
stringr::str_extract(epath,'table[3]')
epath<-xml_path(cur_element)[1]
stringr::str_extract(epath,'table[3]')
epath
stringr::str_extract(epath,'table\\[3\\]')
stringr::str_extract('\\d','table\\[3\\]')
stringr::str_extract('\d','table\\[3\\]')
stringr::str_extract('\\d',table_num)
table_num<-stringr::str_extract(epath,'table\\[3\\]')
stringr::str_extract('\\d',table_num)
stringr::str_extract('\\D',table_num)
stringr::str_extract(table_num,'\\D')
stringr::str_extract(table_num,'\\d+')
as.numeric(stringr::str_extract(table_num,'\\d+'))
epath<-xml_path(cur_element)[1]
table_num<-stringr::str_extract(epath,'table\\[3\\]')
table_num_1<-as.numeric(stringr::str_extract(table_num,'\\d+'))
gsub(paste0('table\\[',table_num_1-1,'\\]'),paste0('table[',table_num_1-1,']')),epath)
gsub(paste0('table\\[',table_num_1-1,'\\]'),paste0('table[',table_num_1-1,']'),epath)
epath<-xml_path(cur_element)[1]
table_num<-stringr::str_extract(epath,'table\\[\\d+\\]')
table_num_1<-as.numeric(stringr::str_extract(table_num,'\\d+'))
epath<-xml_path(cur_element)[1]
table_num<-stringr::str_extract(epath,'table\\[\\d+\\]')
table_num_1<-as.numeric(stringr::str_extract(table_num,'\\d+'))
nepath<-gsub(paste0('table\\[',table_num_1-1,'\\]'),paste0('table[',table_num_1-1,']'),epath)
nepath
epath
nepath<-gsub(paste0('table\\[',table_num_1,'\\]'),paste0('table[',table_num_1-1,']'),epath)
nepath
nbs_queue_row_click<-function(row=1, col=1){
if(row%%2==0){
row_class<-'even'
row<-row/2
}else{
row_class<-'odd'
row<-row/2+1
}
cur_element<-remDr$getPageSource() %>% unlist() %>% read_html() %>%
html_elements(paste0('.',row_class)) %>%
.[row] %>%
html_children() %>%
.[col] %>% html_children()
cur_el_attr<-unlist(html_attrs(cur_element))
if('checkbox' %in% cur_el_attr | '#' %in% cur_el_attr) {
epath<-xml_path(cur_element)[1]
table_num<-stringr::str_extract(epath,'table\\[\\d+\\]')
table_num_1<-as.numeric(stringr::str_extract(table_num,'\\d+'))
nepath<-gsub(paste0('table\\[',table_num_1,'\\]'),paste0('table[',table_num_1-1,']'),epath)
remDr$findElement('xpath',nepath)$clickElement()
}else{
message('Nothing to click')
}
}
nbs_queue_row_click()
nbs_queue_row_click(1,2)
detach("package:wiNBS", unload = TRUE)
devtools::install_github("TDH-SSI-Hub/wiNBS")
detach("package:wiNBS", unload = TRUE)
devtools::install_github("TDH-SSI-Hub/wiNBS")
library("wiNBS")
library("wiNBS")
browser_open()
nbs_load('dc49p74','NBS Staging')
nbs_queue_load('Documents Requiring Review')
nbs_queue_row_click()
nbs_queue_row_click(1,2)
nbs_queue_row_click(2)
nbs_queue_row_click(3)
detach("package:wiNBS", unload = TRUE)
detach("package:wiNBS", unload = TRUE)
#' Opens a Chrome browser ('remDr') on the designated port. When multiple sessions are
#' running concurrently, each session must have a different port, and kill_java
#' must be FALSE.
#'
#' @param kill_java Close all java instances (can affect external processes)
#' @param port Port to use for browser.
#' @param chromever Version of Chrome to use. Leave as NA to attempt autodetection.
#' @param print_to Folder location for downloads (only needed when printing pdfs or downloading files).
#' @return Chrome browser object
#' @export
chrome_open_browser<-function(kill_java=T, port=NA, chrome_ver=NA, print_to=getwd()){
# Download chromedrivers
temp<-wdman::chrome(verbose = F)
if(exists('rD')) rm('rD',pos = 1)
if(exists('remDr')) rm('remDr',pos = 1)
chrome_license_clear()
if(!is.na(print_to)){
print_to<-gsub('/','\\\\',print_to)
if(!grepl('\\\\$',print_to)) print_to<-paste0(print_to,'\\')
message(paste0('Downloads routed to ',print_to))
eCaps <- list(chromeOptions = list(args = list('--kiosk-printing'),prefs = list("savefile.default_directory"=print_to,"download.default_directory" = print_to, "printing.print_preview_sticky_settings.appState"= jsonlite::toJSON(list(recentDestinations=list(id='Save as PDF',origin='local',account=''),selectedDestinationId='Save as PDF', version=2),auto_unbox=TRUE))))
} else{
eCaps<-list()
}
if(is.na(port)){
port<-parallelly::freePort()
}
#cver<-as.numeric_version(binman::list_versions("chromedriver")[[1]])
#cver<-cver[order(cver, decreasing = T)]
if(is.na(chrome_ver)){
cver<-chrome_driver_versions()
}else{
cver<- chrome_ver
}
vtry<-0
while(!exists('rD')){
vtry<-vtry+1
tryCatch({
if(kill_java) system("taskkill /im java.exe /f", ignore.stderr=T,show.output.on.console = F)
rD <<-RSelenium::rsDriver(browser="chrome", port=port, verbose=F,phantomver = NULL, chromever = as.character(cver[vtry]),extraCapabilities=eCaps)
remDr <<- rD[["client"]]
}, message=function(e){
rm('rD',pos=1)
rm('remDr',pos=1)
})
}
remDr$setTimeout(type = "implicit", milliseconds = 4000)
message("Browser 'remDr' created")
}
chrome_driver_versions()
wiNBS::chrome_driver_versions()
#' Opens a Chrome browser ('remDr') on the designated port. When multiple sessions are
#' running concurrently, each session must have a different port, and kill_java
#' must be FALSE.
#'
#' @param kill_java Close all java instances (can affect external processes)
#' @param port Port to use for browser.
#' @param chromever Version of Chrome to use. Leave as NA to attempt autodetection.
#' @param print_to Folder location for downloads (only needed when printing pdfs or downloading files).
#' @return Chrome browser object
#' @export
chrome_open_browser<-function(kill_java=T, port=NA, chrome_ver=NA, print_to=getwd()){
# Download chromedrivers
temp<-wdman::chrome(verbose = F)
if(exists('rD')) rm('rD',pos = 1)
if(exists('remDr')) rm('remDr',pos = 1)
chrome_license_clear()
if(!is.na(print_to)){
print_to<-gsub('/','\\\\',print_to)
if(!grepl('\\\\$',print_to)) print_to<-paste0(print_to,'\\')
message(paste0('Downloads routed to ',print_to))
eCaps <- list(chromeOptions = list(args = list('--kiosk-printing'),prefs = list("savefile.default_directory"=print_to,"download.default_directory" = print_to, "printing.print_preview_sticky_settings.appState"= jsonlite::toJSON(list(recentDestinations=list(id='Save as PDF',origin='local',account=''),selectedDestinationId='Save as PDF', version=2),auto_unbox=TRUE))))
} else{
eCaps<-list()
}
if(is.na(port)){
port<-parallelly::freePort()
}
#cver<-as.numeric_version(binman::list_versions("chromedriver")[[1]])
#cver<-cver[order(cver, decreasing = T)]
if(is.na(chrome_ver)){
message('trying to find version')
cver<-chrome_driver_versions()
}else{
cver<- chrome_ver
}
vtry<-0
while(!exists('rD')){
vtry<-vtry+1
tryCatch({
if(kill_java) system("taskkill /im java.exe /f", ignore.stderr=T,show.output.on.console = F)
rD <<-RSelenium::rsDriver(browser="chrome", port=port, verbose=F,phantomver = NULL, chromever = as.character(cver[vtry]),extraCapabilities=eCaps)
remDr <<- rD[["client"]]
}, message=function(e){
rm('rD',pos=1)
rm('remDr',pos=1)
})
}
remDr$setTimeout(type = "implicit", milliseconds = 4000)
message("Browser 'remDr' created")
}
chrome_open_browser(chrome_ver="138.0.7204.168")
library(wiNBS)
chrome_open_browser(chrome_ver="138.0.7204.168")
cver<-as.numeric_version(binman::list_versions("chromedriver")[[1]])
cver
path <- utils::readRegistry("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe\\")
View(path)
file.info(path)
chrome_loc<-path[["(Default)"]]
file.info(chrome_loc)
View(cver)
chrome_loc
cppFunction('
std::string getFileVersion(std::string filePath) {
DWORD handle;
DWORD size = GetFileVersionInfoSize(filePath.c_str(), &handle);
if (size == 0) {
return "Unable to get file version info size.";
}
std::vector<char> data(size);
if (!GetFileVersionInfo(filePath.c_str(), handle, size, data.data())) {
return "Unable to get file version info.";
}
VS_FIXEDFILEINFO *fileInfo;
UINT len;
if (!VerQueryValue(data.data(), "\\\\", (LPVOID*)&fileInfo, &len)) {
return "Unable to query version value.";
}
DWORD versionMS = fileInfo->dwFileVersionMS;
DWORD versionLS = fileInfo->dwFileVersionLS;
DWORD major = HIWORD(versionMS);
DWORD minor = LOWORD(versionMS);
DWORD build = HIWORD(versionLS);
DWORD revision = LOWORD(versionLS);
std::ostringstream versionStream;
versionStream << major << "." << minor << "." << build << "." << revision;
return versionStream.str();
}
')
library(Rcpp)
cppFunction('
std::string getFileVersion(std::string filePath) {
DWORD handle;
DWORD size = GetFileVersionInfoSize(filePath.c_str(), &handle);
if (size == 0) {
return "Unable to get file version info size.";
}
std::vector<char> data(size);
if (!GetFileVersionInfo(filePath.c_str(), handle, size, data.data())) {
return "Unable to get file version info.";
}
VS_FIXEDFILEINFO *fileInfo;
UINT len;
if (!VerQueryValue(data.data(), "\\\\", (LPVOID*)&fileInfo, &len)) {
return "Unable to query version value.";
}
DWORD versionMS = fileInfo->dwFileVersionMS;
DWORD versionLS = fileInfo->dwFileVersionLS;
DWORD major = HIWORD(versionMS);
DWORD minor = LOWORD(versionMS);
DWORD build = HIWORD(versionLS);
DWORD revision = LOWORD(versionLS);
std::ostringstream versionStream;
versionStream << major << "." << minor << "." << build << "." << revision;
return versionStream.str();
}
')
reticulate::repl_python()
